name: CI
on: [push, pull_request]


env:
  CACHE_NUMBER: 0  # increase to reset cache manually

jobs:
  unit:
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip

          - os: macos-latest
            path: ~/Library/Caches/pip

          - os: windows-latest
            path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        cache: 'pip' # caching pip dependencies
        python-version: ${{ matrix.python-version }}

    - name: Set cache date
      run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Set Cache
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ matrix.path }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup environment
      shell: bash -l {0}
      run: |
        pip install flake8 jupytext nbqa
        # if we remove the --editable flag pytest throws an error, because 
        # there are two copies of the pkg (src/ and site-packages/), this is a 
        # quick way to fix it
        # https://github.com/pytest-dev/pytest/issues/7678

        pip install --editable .
        python -c "import sklearn_evaluation"
        pip install --editable ".[all]"
#      if: steps.cache.outputs.cache-hit != 'true'

    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # run flake8 on .py files and notebooks (.ipynb, .md, etc) 
        flake8
        nbqa flake8 .

    - name: Run tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PLOOMBER_STATS_ENABLED: false
        PYTHON_VERSION: ${{ matrix.python-version }}
      shell: bash -l {0}
      run: |
        eval "$(conda shell.bash hook)"

        # run unit tests, docstrings
        # pytest doctest docs: https://docs.pytest.org/en/latest/doctest.html
        # doctest docs: https://docs.python.org/3/library/doctest.html
        # and examples (this is a hacky way to do it since --doctest-modules will
        # first load any .py files, which are the examples, and then try to run
        # any doctests, there isn't any)
        pytest tests/ --cov=sklearn_evaluation --doctest-modules --durations-min=5 -n auto
        coveralls

  # run: pkgmt check
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]'
      - name: Check project
        run: |
          pkgmt check
